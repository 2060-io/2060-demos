# GaiaID Citizen Registry backend


io.gaiaid.create.token.lifetimeseconds=900
io.gaiaid.verify.token.lifetimeseconds=900

#
# Identity definition
# Here you can define the attributes that of the credential that will be issued by your service.
#
# Just leave it like that for now.
# If you modify it after having already issued a credential, you should delete /tmp/citizen-registry
# and restart docker-compose
# While in dev mode, update the %dev. properties

io.gaiaid.identity.def.name=Gaia Identity
io.gaiaid.identity.def.claim.citizenid=0
io.gaiaid.identity.def.claim.firstname=1
io.gaiaid.identity.def.claim.lastname=1
io.gaiaid.identity.def.claim.avatarname=0
io.gaiaid.identity.def.claim.avatarpic=0
io.gaiaid.identity.def.claim.avatarpic.maxdimension=320
io.gaiaid.identity.def.claim.birthdate=1
io.gaiaid.identity.def.claim.birthplace=1
io.gaiaid.identity.def.claim.photo=1

%dev.io.gaiaid.identity.def.name=Gaia Avatar
%dev.io.gaiaid.identity.def.claim.citizenid=0
%dev.io.gaiaid.identity.def.claim.firstname=0
%dev.io.gaiaid.identity.def.claim.lastname=0
%dev.io.gaiaid.identity.def.claim.avatarname=1
%dev.io.gaiaid.identity.def.claim.avatarpic=1
%dev.io.gaiaid.identity.def.claim.birthdate=0
%dev.io.gaiaid.identity.def.claim.birthplace=0
%dev.io.gaiaid.identity.def.claim.photo=0

#
# Identity recovery
# Here you can define the attributes that will be needed for recovering an identity. 
# While in dev mode, update the %dev. properties

io.gaiaid.identity.restore.claim.citizenid=0
io.gaiaid.identity.restore.claim.firstname=1
io.gaiaid.identity.restore.claim.lastname=1
io.gaiaid.identity.restore.claim.avatarname=0
io.gaiaid.identity.restore.claim.birthdate=1
io.gaiaid.identity.restore.claim.birthplace=1


%dev.io.gaiaid.identity.restore.claim.citizenid=0
%dev.io.gaiaid.identity.restore.claim.firstname=0
%dev.io.gaiaid.identity.restore.claim.lastname=0
%dev.io.gaiaid.identity.restore.claim.avatarname=1
%dev.io.gaiaid.identity.restore.claim.birthdate=0
%dev.io.gaiaid.identity.restore.claim.birthplace=0

# Language of your chatbot
io.gaiaid.language=en

# Welcome message. Available: welcome, welcome2, welcome3.
io.gaiaid.messages.welcome=Welcome to GIR (\uD83C\uDF0E Gaia Identity Registry). Use the contextual menu to get started.
# Title of the contextual menu
io.gaiaid.messages.rootmenu.title=\uD83C\uDF0E Gaia Identity Registry

io.gaiaid.identity.recoverable.seconds=86400
io.gaiaid.auth.valid.for.minutes=0


io.gaiaid.protection=FACE

# here replace p3001.testing.2060.io with the ngrok domain name that will forward to port 2903 (the quarkus backend) 
%dev.io.gaiaid.vision.redirdomain.q=p2603.testing.2060.io
# here replace p3001.testing.2060.io with the ngrok domain name that will forward to port 2904 (the datastore container) 
%dev.io.gaiaid.vision.redirdomain.d=p2604.testing.2060.io

# should work out of the box with our default testing env
io.gaiaid.vision.face.capture.url=https://vision-t.gaiaid.io/face/capture/?token=TOKEN
io.gaiaid.vision.face.verification.url=https://vision-t.gaiaid.io/face/verification/?token=TOKEN
io.gaiaid.vision.fingerprints.capture.url=https://vision-t.gaiaid.io/fp/capture/?token=TOKEN
io.gaiaid.vision.fingerprints.verification.url=https://vision-t.gaiaid.io/fp/verification/?token=TOKEN


io.gaiaid.jms.mo.consumer.threads=1
io.gaiaid.jms.mo.producer.threads=1
io.gaiaid.jms.mo.queue.name=gaia-id-mo
io.gaiaid.jms.mt.consumer.threads=1
io.gaiaid.jms.mt.producer.threads=1
io.gaiaid.jms.mt.queue.name=gaia-id-mt
io.gaiaid.jms.ex.delay=10000


io.gaiaid.debug=true

io.twentysixty.sa.res.c.CredentialTypeResource/mp-rest/url=http://sa:3000/
io.twentysixty.sa.res.c.MessageResource/mp-rest/url=http://sa:3000/

# maps to admin API of service-agent container (port 3000) defined in your docker compose

%dev.io.twentysixty.sa.res.c.CredentialTypeResource/mp-rest/url=http://localhost:3000/
%dev.io.twentysixty.sa.res.c.MessageResource/mp-rest/url=http://localhost:3000/

io.gaiaid.registry.res.c.MediaResource/mp-rest/url=http://ds:2904/
# maps to API of datastore container (port 2904) defined in your docker compose
%dev.io.gaiaid.registry.res.c.MediaResource/mp-rest/url=http://localhost:2904/


quarkus.http.host=0.0.0.0
quarkus.http.port=2903


quarkus.datasource.db-kind=postgresql
quarkus.datasource.username=gaia
quarkus.datasource.password=2060demo
quarkus.datasource.jdbc.url=jdbc:postgresql://localhost/gaia
%dev.quarkus.datasource.jdbc.url=jdbc:postgresql://localhost/gaia
quarkus.datasource.jdbc.max-size=8
quarkus.datasource.jdbc.min-size=2

quarkus.hibernate-orm.database.generation=update

quarkus.artemis.url=tcp://127.0.0.1:61616
quarkus.artemis.username=quarkus
quarkus.artemis.password=Quar2060enbPi26

quarkus.swagger-ui.always-include=true

quarkus.jib.jvm-entrypoint=/bin/sh,run-java.sh

quarkus.container-image.build=true
quarkus.container-image.push=true
quarkus.container-image.group=io2060
quarkus.container-image.registry=registry.hub.docker.com
quarkus.container-image.name=2060-demos-citizen-registry
quarkus.jib.ports=8080


